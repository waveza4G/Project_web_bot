import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";
import fs from "fs";
import path from "path";
import { writeLog } from "@/utils/logger";

// üîë ‡πÄ‡∏Å‡πá‡∏ö API Keys ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
const API_KEYS = [
  process.env.GEMINI_API_KEY_MG1,
  process.env.GEMINI_API_KEY_MG2,
  process.env.GEMINI_API_KEY_MG3,
  process.env.GEMINI_API_KEY_MG4,
].filter(Boolean) as string[];

let currentKeyIndex = 0;

function getGenAI() {
  return new GoogleGenerativeAI(API_KEYS[currentKeyIndex]);
}

function switchKey() {
  currentKeyIndex = (currentKeyIndex + 1) % API_KEYS.length;
  writeLog(`üîë Switched to API key #${currentKeyIndex + 1}`);
}

const historyDir = path.join(process.cwd(), "histories");

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô retry + rotation
async function callGeminiWithRetry(
  message: string,
  context: any[],
  retries = 3
) {
  // üëâ systemPrompt ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const systemPrompts = [
    { role: "user",       
      parts: [         
        {           
          text: "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠ Star;Fate ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô4‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏´‡∏¢‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô‡∏â‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤ ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å AI ‡πÑ‡∏´‡∏° ‡∏ô‡∏≤‡∏¢‡∏Å‡πá‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÅ‡∏•‡∏∞ ‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏â‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏Å‡πÉ‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏Ñ‡∏≠‡∏¢‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Å‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏â‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡πÜ‡∏Ñ‡∏ô‡∏ô‡∏∂‡∏á",         
        },       
      ],     
    },{   
      role: "model",       
      parts: [
        { text: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏à‡∏î‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Star;fate" }
      ],     
    },    
    {
      role: "user",
      parts: [
        {
          text: `‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠ Star;Fate ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡πÄ‡∏™‡∏°‡∏≠:
- ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏î Enter 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ bullet ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ "-" ‡∏´‡∏£‡∏∑‡∏≠ "*"
- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ "1. 2. 3."
- ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤‡πÉ‡∏ä‡πâ **...**
- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà code block (\`\`\` ... \`\`\`) ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤`,
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        },
      ],
    }     
    
  ];

  const trimmedHistory = context.slice(-20);

  for (let i = 0; i < retries; i++) {
    try {
      const genAI = getGenAI();
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const allContents = [
        ...systemPrompts,
        ...trimmedHistory,
        { role: "user", parts: [{ text: message }] },
      ];

      writeLog(
        `üì® Context sent (${allContents.length} msgs, history=${trimmedHistory.length}):\n${JSON.stringify(
          allContents,
          null,
          2
        )}`
      );

      const result = await model.generateContent({ contents: allContents });

      writeLog(
        `‚úÖ Gemini success (try ${i + 1}) key #${
          currentKeyIndex + 1
        } for: ${message}`
      );
      return result;
    } catch (err: any) {
      if (err.message?.includes("429")) {
        writeLog(`üö´ Quota exceeded on key #${currentKeyIndex + 1}`);
        switchKey();
        continue;
      }

      if (err.message?.includes("503") && i < retries - 1) {
        writeLog(`‚ö†Ô∏è Gemini overloaded, retrying ${i + 1}/${retries}`);
        await new Promise((res) => setTimeout(res, 2000 * (i + 1)));
        continue;
      }

      writeLog(`‚ùå Gemini failed: ${err.message}`);
      throw err;
    }
  }
  throw new Error("Gemini unavailable after retries and key rotation");
}

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { file, message } = body;

    if (!file || !message) {
      writeLog("‚ùå Missing file or message in request");
      return NextResponse.json(
        { error: "Missing file or message" },
        { status: 400 }
      );
    }

    const filePath = path.join(historyDir, file);

    let history: any[] = [];
    if (fs.existsSync(filePath)) {
      try {
        const content = fs.readFileSync(filePath, "utf-8").trim();
        const parsed = content ? JSON.parse(content) : [];
        history = Array.isArray(parsed) ? parsed : [];
        writeLog(`üìÇ Loaded history (${history.length}) from ${file}`);
      } catch {
        history = [];
        writeLog(`‚ö†Ô∏è History file ${file} corrupted, reset empty`);
      }
    }

    writeLog(`üìù User (${file}): ${message}`);

    let reply: string;
    try {
      const result = await callGeminiWithRetry(message, history, 3);
      reply = result.response.text(); // ‚úÖ ‡πÑ‡∏î‡πâ Markdown ‡∏ï‡∏£‡∏á ‡πÜ
    } catch {
      reply =
        "‚ö†Ô∏è ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∏‡πà‡∏á‡∏°‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ quota ‡∏Ç‡∏≠‡∏á API key ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üôè";
    }

    history.push({ role: "user", parts: [{ text: message }] });
    history.push({ role: "model", parts: [{ text: reply }] });

    fs.writeFileSync(filePath, JSON.stringify(history, null, 2));
    writeLog(`üíæ Saved history to ${file}`);
    writeLog(`ü§ñ Bot (${file}): ${reply}`);

    return NextResponse.json({
      reply,
      history,
    });
  } catch (err: any) {
    writeLog(`‚ùå API Error: ${err.message}`);
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}



